# To detect whether the command exists in the system
# use `command -v command` or `hash command`
# `hash` can detect binary only

alias bwrap-open="bwrap --unshare-all --die-with-parent --ro-bind / / \
--tmpfs /sys --tmpfs /home --tmpfs /tmp --tmpfs /run --proc /proc --dev /dev \
--ro-bind "$XDG_RUNTIME_DIR" "$XDG_RUNTIME_DIR" \
--ro-bind /tmp/.X11-unix /tmp/.X11-unix \
--ro-bind /run/user/$UID/bus /run/user/$UID/bus \
--ro-bind ~/.local/share/fonts ~/.local/share/fonts \
--ro-bind ~/.config/fontconfig ~/.config/fontconfig \
--bind ~/.cache/fontconfig ~/.cache/fontconfig \
--bind ~/tmp ~/tmp \
--chdir ~ \
--share-net"

function set-proxy {
    if curl $(cat ~/.proxy_server) &>/dev/null; then
		cat >"$HOME/.ssh/config" <<EOF
Host github.com
    Hostname ssh.github.com
    Port 443
    User git
    ProxyCommand nc -v -x $(cat ~/.proxy_server) %h %p
EOF
        sock5h_url="socks5h://$(cat ~/.proxy_server)"
        http_url="http://$(cat ~/.proxy_server)"
        export all_proxy=$http_url
        export ALL_PROXY=$all_proxy
        export http_proxy=$all_proxy
        export https_proxy=$all_proxy
        export HTTP_PROXY=$all_proxy
        export HTTPS_PROXY=$all_proxy
        export NO_PROXY=localhost,127.0.0.1
        env | grep $(cat ~/.proxy_server)
        git config --global http.https://github.com.proxy $sock5h_url
        git config --global http.https://codeberg.org.proxy $sock5h_url
    else
        echo '~/.proxy_server not ok..'
        echo 'example: echo "127.0.0.1:7890" > ~/.proxy_server'
    fi
}

function unset-proxy {
    sed -i '/http/d;/proxy/d' .gitconfig
    echo 'SG9zdCBnaXRodWIuY29tCiAgICBIb3N0bmFtZSBzc2guZ2l0aHViLmNvbQogICAgUG9ydCA0NDMKICAgIFVzZXIgZ2l0Cg==' | base64 -d >.ssh/config
    unset all_proxy
    unset ALL_PROXY
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    env | grep PROXY
    env | grep proxy
    echo "ok"
}

nvs-install() {
    if [ -z $NVS_HOME ]; then
        export NVS_HOME="$HOME/.local/share/nvs"
        git clone https://github.com/jasongin/nvs "$NVS_HOME"
        \. "$NVS_HOME/nvs.sh" install
    else
        echo "already install nvs at $NVS_HOME"
    fi
    nvs add lts
    nvs use lts
    nvs link lts
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
if hash notify-send 2>/dev/null; then
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
fi

if hash nvim 2>/dev/null; then
    alias vim="nvim"
fi

rg-fzf() {
    RG_PREFIX="rg --files-with-matches"
    local file
    file="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
        fzf --sort \
        --preview="[[ ! -z {} ]] && rg --pretty --context 5 {q} {}" \
        --phony -q "$1" \
        --bind "change:reload:$RG_PREFIX {q}" \
        --preview-window="70%:wrap"
    )" &&
    if hash xdg-open 2>/dev/null; then
        echo "opening $file"
        xdg-open "$file"
    else
        echo "fileName: $file"
    fi
}

alias fcd='cd $(fd -HI -t d | fzf)'
alias fvi='vim $(fd -HI -t f | fzf)'
alias fvi-sudo='cat ~/.password | sudo -S vim $(fd -HI -t f | fzf)'

if hash exa 2>/dev/null; then
    alias ls='exa'
    alias l='exa -l --all --group-directories-first --git'
    alias ll='exa -l --all --all --group-directories-first --git'
    alias lt='exa -T --git-ignore --level=2 --group-directories-first'
    alias llt='exa -lT --git-ignore --level=2 --group-directories-first'
    alias lT='exa -T --git-ignore --level=4 --group-directories-first'
else
    alias l='ls -lah'
    alias ll='ls -alF'
    alias la='ls -A'
fi

if hash xdg-open 2>/dev/null; then
    alias clashui-web1='xdg-open http://yacd.haishan.me/'
    alias clashui-web2='xdg-open http://clash.razord.top/'
fi

if hash wps-office 2>/dev/null; then
    alias wps-office="QT_SCREEN_SCALE_FACTORS=1 wps-office"
fi

if hash kquitapp5 2>/dev/null; then
    alias plasmashell-restart="kquitapp5 plasmashell && kstart plasmashell"
fi

if hash nvidia-smi 2>/dev/null; then
    alias nvidia_offload='__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia'
fi

# https://github.com/ystyle/kaf-cli
alias txt_to_epub='kaf-cli -format epub -lang zh -tips=0 -filename'

# http://iscute.cn/chfs
alias chfs='chfs --port=8888'

alias qcow2_compress="qemu-img convert -p -c -o compression_type=zstd -f qcow2 -O qcow2"
alias qcow2_password_init="virt-customize --root-password password:root --run-command 'echo UGVybWl0Um9vdExvZ2luIHllcwo= | base64 -d >> /etc/ssh/sshd_config' -a"

alias ref-dup='cat ~/.password | sudo -S zypper ref && sudo zypper dup --no-recommends && cat ~/.password | sudo -S zypper ps -s'
alias en='LANG="en_US.UTF-8"'
alias git-pushall='git remote | xargs -i git push {}'
alias git-add-commit-push='git add . && git commit -m "update" && for i in $(git remote) ;do git push $i ;done'
alias yadm-pushall='yadm remote | xargs -i yadm push {}'

if [ -d "$HOME/.local/share/dotfiles.GitBareRepo" ]; then
    alias cfgit='git --git-dir=$HOME/.local/share/dotfiles.GitBareRepo --work-tree=$HOME'
    alias cfgit-push-all='for i in $(cfgit remote) ;do cfgit push $i ;done'
    alias cfgit-force-push-all='for i in $(cfgit remote) ;do cfgit push -f $i ;done'
    alias cfgit-add-push-all='cfgit commit -a && for i in $(cfgit remote) ;do cfgit push $i ;done'
    alias cfgit-status='cfgit status'
    alias cfgit-stash='cfgit stash'
    alias cfgit-restore='cfgit restore'
    alias cfgit-diff='cfgit diff'
fi

alias clang-format="clang-format --style=WebKit"
alias paste-farsee='curl -F "c=@-" "https://fars.ee/"'
alias paste-termbin="nc termbin.com 9999"
alias ping='ping -c 5'
alias ip-lan='curl -s http://myip.ipip.net | sd "\n" "\t"'
alias ip-wan='curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.52" https://api.ip.sb/geoip | jq ".ip , .country" | sd "\"" "" | sd "\n" "\t"'
alias ip-wan1='curl -s http://ipinfo.io/ip'
alias www="miniserve --index=index.html -v"
