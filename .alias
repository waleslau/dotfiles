# To detect whether the command exists in the system
# use `command -v command` or `hash command`
# `hash` can detect binary only

transfer(){ if [ $# -eq 0 ];then echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2;return 1;fi;if tty -s;then file="$1";file_name=$(basename "$file");if [ ! -e "$file" ];then echo "$file: No such file or directory">&2;return 1;fi;if [ -d "$file" ];then file_name="$file_name.zip" ,;(cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null,;else cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;else file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;echo " ";}

function set-proxy {
    export http_proxy='http://127.0.0.1:7890'
    export https_proxy=$http_proxy
    export HTTP_PROXY=$http_proxy
    export HTTPS_PROXY=$http_proxy
    export NO_PROXY=localhost,127.0.0.1
    env | grep "$http_proxy"
    echo "ok"
}

nvs-install() {
    export NVS_HOME="$HOME/.local/share/nvs"
    git clone https://github.com/jasongin/nvs "$NVS_HOME"
    \. "$NVS_HOME/nvs.sh" install
    nvs add lts
    nvs use lts
    nvs link lts
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
if hash notify-send 2>/dev/null; then
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
fi

if hash nvim 2>/dev/null; then
    alias vim="nvim"
fi

rg-fzf() {
    RG_PREFIX="rg --files-with-matches"
    local file
    file="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
        fzf --sort \
        --preview="[[ ! -z {} ]] && rg --pretty --context 5 {q} {}" \
        --phony -q "$1" \
        --bind "change:reload:$RG_PREFIX {q}" \
        --preview-window="70%:wrap"
    )" &&
    if hash xdg-open 2>/dev/null; then
        echo "opening $file"
        xdg-open "$file"
    else
        echo "fileName: $file"
    fi
}

alias fcd='cd $(fd -HI -t d | fzf)'
alias fvi='vim $(fd -HI -t f | fzf)'
alias fvi-sudo='cat ~/.password | sudo -S vim $(fd -HI -t f | fzf)'

if hash exa 2>/dev/null; then
    alias ls='exa'
    alias l='exa -l --all --group-directories-first --git'
    alias ll='exa -l --all --all --group-directories-first --git'
    alias lt='exa -T --git-ignore --level=2 --group-directories-first'
    alias llt='exa -lT --git-ignore --level=2 --group-directories-first'
    alias lT='exa -T --git-ignore --level=4 --group-directories-first'
else
    alias l='ls -lah'
    alias ll='ls -alF'
    alias la='ls -A'
fi

if hash caddy 2>/dev/null && hash xdg-open 2>/dev/null; then
    alias mysql45='xdg-open http://localhost:8000/iframe/ && caddy file-server --listen :8000 --browse --root ~/Documents/MySQL45/mysql45.site'
    alias www='xdg-open http://localhost:8000 && caddy file-server --listen :8000 --browse --root $PWD'
fi

if hash xdg-open 2>/dev/null; then
    alias clashui-web1='xdg-open http://yacd.haishan.me/'
    alias clashui-web2='xdg-open http://clash.razord.top/'
fi

if hash wps-office 2>/dev/null; then
    alias wps-office="QT_SCREEN_SCALE_FACTORS=1 wps-office"
fi

if hash kaf-cli 2>/dev/null; then
    alias txt_to_epub='kaf-cli -format epub -lang zh -tips=0 -filename'
    #else
    #    echo 'go to https://github.com/ystyle/kaf-cli download kaf-cli'
fi

if hash chfs 2>/dev/null; then
    alias chfs='chfs --port=8888'
    #else
    #    echo 'go to http://iscute.cn/chfs download chfs'
fi

if hash kquitapp5 2>/dev/null; then
    alias plasmashell-restart="kquitapp5 plasmashell && kstart plasmashell"
fi

if hash nvidia-smi 2>/dev/null; then
    alias nvidia_offload='__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia'
fi

if hash qemu-img 2>/dev/null; then
    alias qcow2_compress="qemu-img convert -p -c -o compression_type=zstd -f qcow2 -O qcow2"
    #else
    #    echo 'you need install qemu-tools'
fi

if hash virt-customize 2>/dev/null; then
    alias qcow2_password_init="virt-customize --root-password password:root --run-command 'echo UGVybWl0Um9vdExvZ2luIHllcwo= | base64 -d >> /etc/ssh/sshd_config' -a"
    #else
    #    echo 'you need install guestfs-tools'
fi

if [ -s "$HOME/.password" ]; then
    alias ref-dup='cat ~/.password | sudo -S zypper ref && sudo zypper dup --no-recommends && cat ~/.password | sudo -S zypper ps -s'
else
    echo "create $HOME/.password ..."
    #echo -n 'input sudo password: '
    read -s -p 'input sudo password for sudo -S: ' tmp_pass
    echo $tmp_pass > $HOME/.password
fi

alias git='LANG=en_US.UTF-8 git'
alias git-push-all='for i in $(git remote) ;do git push $i ;done'
alias git-force-push-all='for i in $(git remote) ;do git push -f $i ;done'
alias git-add-commit-push='git add . && git commit -m "update" && for i in $(git remote) ;do git push $i ;done'

if [ -d "$HOME/.local/share/dotfiles.GitBareRepo" ]; then
    alias cfgit='git --git-dir=$HOME/.local/share/dotfiles.GitBareRepo --work-tree=$HOME'
    alias cfgit-push-all='for i in $(cfgit remote) ;do cfgit push $i ;done'
    alias cfgit-force-push-all='for i in $(cfgit remote) ;do cfgit push -f $i ;done'
    alias cfgit-add-push-all='cfgit commit -a && for i in $(cfgit remote) ;do cfgit push $i ;done'
    alias cfgit-status='cfgit status'
    alias cfgit-stash='cfgit stash'
    alias cfgit-restore='cfgit restore'
    alias cfgit-diff='cfgit diff'
fi

if hash yadm 2>/dev/null; then
alias yadm-push-all='for i in `yadm remote show`;do yadm push $i;done'
alias yadm-force-push-all='for i in `yadm remote show`;do yadm push -f $i;done'
fi

alias clang-format="clang-format --style=WebKit"
alias paste-farsee='curl -F "c=@-" "https://fars.ee/"'
alias paste-termbin="nc termbin.com 9999"
alias ping='ping -c 5'
alias ip-lan='curl -s http://myip.ipip.net | sd "\n" "\t"'
alias ip-wan='curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.52" https://api.ip.sb/geoip | jq ".ip , .country" | sd "\"" "" | sd "\n" "\t"'
alias ip-wan1='curl -s http://ipinfo.io/ip'
